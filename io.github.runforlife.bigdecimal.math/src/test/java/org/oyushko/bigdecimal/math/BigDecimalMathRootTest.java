package org.oyushko.bigdecimal.math;

import org.oyushko.bigdecimal.math.util.AbstractBigDecimalTest;
import org.junit.Test;

import java.math.BigDecimal;
import java.math.MathContext;

public class BigDecimalMathRootTest extends AbstractBigDecimalTest {
    @Test
    public void testRoot() {
        for(double n : new double[] { 0.1, 0.9, 1, 1.1, 2, 10, 33.3333, 1234.5678 }) {
            for (double x : new double[]{ 0, 0.1, 0.9, 1, 1.1, 2, 10, 33.3333, 1234.5678 }) {
                System.out.println("ROOT x=" + x + " n=" + n);
                assertBigDecimal(
                        "root(2," + x + ")",
                        toCheck(Math.pow(x, 1.0 / n)),
                        BigDecimalMath.root(BigDecimal.valueOf(x), BigDecimal.valueOf(n), MC),
                        MC_CHECK_DOUBLE);
            }
        }
    }

    @Test(expected = ArithmeticException.class)
    public void testRootZeroN() {
        BigDecimalMath.root(BigDecimal.ONE, BigDecimal.ZERO, MC);
    }

    @Test(expected = ArithmeticException.class)
    public void testRootNegativeN() {
        BigDecimalMath.root(BigDecimal.ONE, BD(-1), MC);
    }

    @Test(expected = ArithmeticException.class)
    public void testRootNegativeX() {
        BigDecimalMath.root(BD(-1), BigDecimal.ONE, MC);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testRootUnlimitedFail() {
        BigDecimalMath.root(BigDecimal.valueOf(1.2), BigDecimal.valueOf(2), MathContext.UNLIMITED);
    }

    @Test
    public void testRootHighAccuracy1() {
        // Result from wolframalpha.com: root(1.23, 123)
        BigDecimal expected = BigDecimalMath.toBigDecimal("50.016102539344819307741514415079435545110277821887074630242881493528776023690905378058352283823814945584087486290764920313665152884137840533937075179853255596515758851877960056849468879933122908090021571162427934915567330612627267701300492535817858361072169790783434196345863626810981153268939825893279523570322533446766188724600595265286542918045850353371520018451295635609248478721067200812355632099802713302132804777044107393832707173313768807959788098545050700242134577863569636367439867566923334792774940569273585734964008310245010584348384920574103306733020525390136397928777667088202296433541706175886006626333525007680397351405390927420825851036548474519239425298649420795296781692303253055152441850691276044546565109657012938963181532017974206315159305959543881191233733179735321461579808278383770345759408145745617032705494900390986476773247981270283533959979287340513398944113566999839889290733896874439682249327621463735375868408190435590094166575473967368412983975580104741004390308453023021214626015068027388545767003666342291064051883531202983476423138817666738346033272948508395214246047027012105246939488877506475824651688812245962816086719050192476878886543996441778751825677213412487177484703116405390741627076678284295993334231429145515176165808842776515287299275536932744066126348489439143701880784521312311735178716650919024092723485314329094064704170548551468318250179561508293077056611877488417962195965319219352314664764649802231780262169742484818333055713291103286608643184332535729978330383356321740509817475633105247757622805298711765784874873240679024286215940395303989612556865748135450980540945799394622053158729350598632915060818702520420240989908678141379300904169936776618861221839938283876222332124814830207073816864076428273177778788053613345444299361357958409716099682468768353446625063");
        assertPrecisionCalculation(
                expected,
                mathContext -> BigDecimalMath.root(BigDecimal.valueOf(123), BigDecimal.valueOf(1.23), mathContext),
                10);
    }

    @Test
    public void testRootHighAccuracy2() {
        // Result from wolframalpha.com: root(7.5, 123)
        BigDecimal expected = BigDecimalMath.toBigDecimal("1.8995643695815870676539369434054361726808105217886880103090875996194822396396255621113000403452538887419132729641364085738725440707944858433996644867599831080192362123855812595483776922496542428049642916664676504355648001147425299497362249152998433619265150901899608932149147324281944326398659053901429881376755786331063699786297852504541315337453993167176639520666006383001509553952974478682921524643975384790223822148525159295285828652242201443762216662072731709846657895992750535254286493842754491094463672629441270037173501058364079340866564365554529160216015597086145980711187711119750807640654996392084846441696711420521658760165363535215241687408369549643269709297427044177507157609035697648282875422321141920576120188389383509318979064825824777240151847818551071255436323480281154877997743553609520167536258202911691329853232693386770937694807506144279660147324316659333074620896627829029651910783066736606497262785345465872401993026696735802446138584306213230373571409591420951964537136053258998945471633936332983896917810023265095766395377592848121611444196796785031727740335105553348270077424620974061727975050161324060753928284759055040064976732991126510635738927993365006832681484889202649313814280125684525505938973967575274196130269615461251746873419445856759329916403947432038902141704646304799083820073914767560878449162496519826664715572693747490088659968040153989493366037393989012508491856761986732685422561958101646754270192269505879594808800416777471196270722586367363680538183391904535845392721112874375802640395545739073303112631715831096156004422381940090623765493332249827278090443678800852264922795299927727708248191560574252923342860845325222035245426918719153132138325983001330317244830727602810422542012322698940744820925849667642343510406965273569391887099540050259962759858771196756422007171");
        assertPrecisionCalculation(
                expected,
                mathContext -> BigDecimalMath.root(BigDecimal.valueOf(123), BigDecimal.valueOf(7.5), mathContext),
                10);
    }

    @Test
    public void testRootRandom() {
        assertRandomCalculation(
                adaptCount(100),
                "root",
                random -> random.nextDouble() * 10 + 0.000001,
                random -> random.nextDouble() * 5,
                null,
                BigDecimalMath::root);
    }

    @Test(expected = ArithmeticException.class)
    public void testRootNegative() {
        BigDecimalMath.root(BD(-1), BigDecimal.ONE, MC);
    }
}
